<?phpuse \Fhaculty\Graph\Graph as Graph;use Fhaculty\Graph\Vertex;use Graphp\Algorithms\ShortestPath\BreadthFirst;class Visualizer {    private $set_name;    public function __construct($setname) {        $this->set_name = $setname;    }    public function visualizeDataset($mode) {        $result = array("result" => "success", "message" => "", "data" => array("nodes" => "", "edges" => ""));        if($mode == "KEY_PLAYER") {            //first load the datasets records            $comsQuery = "                    SELECT                         T.telephone_1 AS caller, T.telephone_2 AS called, T.weight AS weight, TEL.type AS type_1, TEL2.type AS type_2                     FROM                         ix_telecommunications AS T                     JOIN                         ix_telephone_number AS TEL                     ON                         T.telephone_1 = TEL.number                     JOIN                         ix_telephone_number AS TEL2                     ON                         T.telephone_2 = TEL2.number                     JOIN                         ix_datasets_telecommunications AS DT                     ON                         T.telephone_1 = DT.caller AND T.telephone_2 = DT.called AND T.time_stamp = DT.time_stamp AND T.duration = DT.duration                    WHERE                         DT.set_name = '".$this->set_name."'                    LIMIT                        3000            ";            try{                $stmt2 = DB::get()->dbh->prepare($comsQuery);                $stmt2->execute();            }catch(PDOException $e) {                $result['result'] = "failure";                $result['message'] = "Select comms records query failed!" . $e->getMessage();                return $result;            }            $COMS = array();            while($com = $stmt2->fetch()) {                $communication = array("from" => $com->caller, "to" => $com->called, "weight" => $com->weight, "from_type" => $com->type_1, "to_type" => $com->type_2);                $res = self::comInArray($communication, $COMS);                if($res == -1) {                    array_push($COMS, $communication);                } else {                    if($COMS[$res]['weight'] < $communication['weight']) {                        $COMS[$res]['weight'] = $communication['weight'];                    }                }            }            $edges = "[";            foreach($COMS as $com) {                $edges .= "{from: '".$com['from']."', to: '".$com['to']."', value: '".$com['weight']."', dataset: '".$this->set_name."'},";            }            if(count($COMS) > 0) {                $edges = substr($edges, 0, strlen($edges)-1);            }            $edges .= "]";            if(count($COMS) > 0) {/*                $numbersQuery = "                                        SELECT DISTINCT                                             TELEPHONES.number AS number, TELEPHONES.type AS type, TELEPHONES.weight AS num_weight                                        FROM                                             (  SELECT DISTINCT                                                    COMS1.caller AS number                                                FROM                                                    (".$comsQuery.") AS COMS1                                                                                                UNION                                                                                                SELECT DISTINCT                                                    COMS2.called AS number                                                FROM                                                    (".$comsQuery.") AS COMS2  ) AS NUMS                                        JOIN                                              ix_telephone_number AS TELEPHONES                                        ON                                              NUMS.number = TELEPHONES.number                                                                                                ";*/                $numbersQuery = "                                SELECT DISTINCT                                     TELS.number, type, weight AS num_weight                                FROM                                     ix_telephone_number AS TELS                                JOIN                                      ix_datasets_telephone_numbers AS ASSOC                                ON                                      TELS.number = ASSOC.number                                WHERE                                      ASSOC.set_name = :snam                                                            ";                try{                    $stmt1 = DB::get()->dbh->prepare($numbersQuery);                    $stmt1->bindParam(":snam", $this->set_name, PDO::PARAM_STR);                    $stmt1->execute();                }catch(PDOException $e) {                    $result['result'] = "failure";                    $result['message'] = "Select number records query failed!";                    return $result;                }                $nodes = "[";                while($n = $stmt1->fetch()) {                    if($n->type == 'landline') {                        $group = "landlines";                    } else {                        $group = "mobiles";                    }                    $nodes .= "{id: '".$n->number."', label: '".$n->number."', group: '".$group."', weight: '".$n->num_weight."', dataset: '".$this->set_name."' },";                }                $nodes = substr($nodes, 0, strlen($nodes)-1);                $nodes .= "]";                $result['data']['nodes'] = $nodes;                $result['data']['edges'] = $edges;                return $result;            } //end of if anyCom block            else {                $numbersQuery = "                    SELECT DISTINCT                         TELEPHONES.number AS number, TELEPHONES.type AS type                    FROM                         ix_datasets_telephone_numbers AS asoc                    JOIN                          ix_telephone_number AS TELEPHONES                    ON                          asoc.number = TELEPHONES.number                    WHERE                          asoc.set_name = '".$this->set_name."'                                    ";                try{                    $stmt1 = DB::get()->dbh->prepare($numbersQuery);                    $stmt1->execute();                }catch(PDOException $e) {                    $result['result'] = "failure";                    $result['message'] = "Select number records query failed!";                    return $result;                }                $nodes = "[";                while($n = $stmt1->fetch()) {                    if($n->type == 'landline') {                        $group = "landlines";                    } else {                        $group = "mobiles";                    }                    $nodes .= "{id: '".$n->number."', label: '".$n->number."', group: '".$group."' },";                }                $nodes = substr($nodes, 0, strlen($nodes)-1);                $nodes .= "]";                $result['data']['nodes'] = $nodes;                $result['data']['edges'] = $edges;                return $result;            }        }    }    public static function expandNodes($nodesArray) {        $result = array("result" => "success", "message" => "", "data" => array("nodes" => "", "edges" => ""));        $ids = join("','",$nodesArray);        //first load the datasets records        $comsQuery = "                    SELECT                        T.telephone_1 AS caller, T.telephone_2 AS called, T.weight AS weight, TEL.type AS type_1, TEL2.type AS type_2                    FROM                        ix_telecommunications AS T                    JOIN                        ix_telephone_number AS TEL                    ON                         T.telephone_1 = TEL.number                    JOIN                        ix_telephone_number AS TEL2                    ON                         T.telephone_2 = TEL2.number                                                       WHERE                        T.telephone_1 IN ('$ids') OR T.telephone_2 IN ('$ids')            ";        $numbersQuery = "                    SELECT DISTINCT                         TELEPHONES.number AS number, TELEPHONES.type AS type                    FROM                         (  SELECT DISTINCT                                COMS1.caller AS number                            FROM                                (".$comsQuery.") AS COMS1                                                        UNION                                                        SELECT DISTINCT                                COMS2.called AS number                            FROM                                (".$comsQuery.") AS COMS2  ) AS NUMS                    JOIN                          ix_telephone_number AS TELEPHONES                    ON                          NUMS.number = TELEPHONES.number                                                        ";        try{            $stmt2 = DB::get()->dbh->prepare($comsQuery);            $stmt2->execute();        }catch(PDOException $e) {            $result['result'] = "failure";            $result['message'] = "Select comms records query failed!" . $e->getMessage();            return $result;        }        $COMS = array();        while($com = $stmt2->fetch()) {            $communication = array("from" => $com->caller, "to" => $com->called, "weight" => $com->weight, "from_type" => $com->type_1, "to_type" => $com->type_2);            $res = self::comInArray($communication, $COMS);            if($res == -1) {                array_push($COMS, $communication);            } else {                if($COMS[$res]['weight'] < $communication['weight']) {                    $COMS[$res]['weight'] = $communication['weight'];                }            }        }        $edges = "[";        foreach($COMS as $com) {            $edges .= "{from: '".$com['from']."', to: '".$com['to']."', value: '".$com['weight']."'},";        }        if(count($COMS) > 0) {            $edges = substr($edges, 0, strlen($edges)-1);        }        $edges .= "]";        try{            $stmt1 = DB::get()->dbh->prepare($numbersQuery);            $stmt1->execute();        }catch(PDOException $e) {            $result['result'] = "failure";            $result['message'] = "Select number records query failed!";            return $result;        }        $nodes = "[";        while($n = $stmt1->fetch()) {            if($n->type == 'landline') {                $group = "landlines";            } else {                $group = "mobiles";            }            $nodes .= "{id: '".$n->number."', label: '".$n->number."', group: '".$group."' },";        }        $nodes = substr($nodes, 0, strlen($nodes)-1);        $nodes .= "]";        $result['data']['nodes'] = $nodes;        $result['data']['edges'] = $edges;        return $result;    }    private static function comInArray($com, $array) {        for($i = 0; $i < count($array); $i++) {            if(($array[$i]["from"] == $com["from"] && $array[$i]['to'] == $com['to'])  ||  ($array[$i]['from'] == $com['to'] && $array[$i]['to'] == $com['from'])) {                return $i;            }        }        return -1;    }}?>